/* Generated By:JavaCC: Do not edit this line. Incognito.java */
public class Incognito implements IncognitoConstants {
    public static void main(String args[]) throws ParseException
    {
        Incognito parser = new Incognito(System.in);
        while (true)
        {
            parser.parseNextToken();
        }
    }

  static final public void MainClass() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(ID);
    jj_consume_token(LCURLYBRACE);
    jj_consume_token(MAIN);
    jj_consume_token(L_PARENTHESIS);
    jj_consume_token(STRING_ARRAY);
    jj_consume_token(ID);
    jj_consume_token(R_PARENTHESIS);
    jj_consume_token(LCURLYBRACE);
    Statement();
    jj_consume_token(RCURLYBRACE);
    jj_consume_token(RCURLYBRACE);
  }

  static final public void ClassDecl() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      jj_consume_token(ID);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(LCURLYBRACE);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case INT_ARRAY:
      case ID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      VarDecl();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      MethodDecl();
    }
    jj_consume_token(RCURLYBRACE);
  }

  static final public void VarDecl() throws ParseException {
    Type();
    jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
  }

  static final public void MethodDecl() throws ParseException {
    jj_consume_token(PUBLIC);
    Type();
    jj_consume_token(ID);
    jj_consume_token(L_PARENTHESIS);
    FormalList();
    jj_consume_token(R_PARENTHESIS);
    jj_consume_token(LCURLYBRACE);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case INT_ARRAY:
      case ID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      VarDecl();
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case PRINT:
      case LCURLYBRACE:
      case ID:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      Statement();
    }
    jj_consume_token(RETURN);
    Exp();
    jj_consume_token(SEMICOLON);
    jj_consume_token(RCURLYBRACE);
  }

  static final public void FormalList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
    case INT_ARRAY:
    case ID:
      Type();
      jj_consume_token(ID);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        FormalRest();
      }
      break;
    default:
      jj_la1[6] = jj_gen;

    }
  }

  static final public void FormalRest() throws ParseException {
    jj_consume_token(COMMA);
    Type();
    jj_consume_token(ID);
  }

  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_ARRAY:
      jj_consume_token(INT_ARRAY);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCURLYBRACE:
      jj_consume_token(LCURLYBRACE);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case PRINT:
        case LCURLYBRACE:
        case ID:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_6;
        }
        Statement();
      }
      jj_consume_token(RCURLYBRACE);
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(L_PARENTHESIS);
      Exp();
      jj_consume_token(R_PARENTHESIS);
      Statement();
      jj_consume_token(ELSE);
      Statement();
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(L_PARENTHESIS);
      Exp();
      jj_consume_token(R_PARENTHESIS);
      Statement();
      break;
    case PRINT:
      jj_consume_token(PRINT);
      jj_consume_token(L_PARENTHESIS);
      Exp();
      jj_consume_token(R_PARENTHESIS);
      Statement();
      jj_consume_token(SEMICOLON);
      break;
    case ID:
      jj_consume_token(ID);
      jj_consume_token(ASSIGNEQUAL);
      Exp();
      jj_consume_token(SEMICOLON);
      break;
      jj_consume_token(ID);
      jj_consume_token(LSQUAREBRACKET);
      Exp();
      jj_consume_token(RSQUAREBRACKET);
      jj_consume_token(ASSIGNEQUAL);
      Exp();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      break;
    case LESS_THAN:
      jj_consume_token(LESS_THAN);
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case STAR:
      jj_consume_token(STAR);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case THIS:
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case ID:
      Term();
      ExpPrime();
      break;
    case EXCLAMATION:
      jj_consume_token(EXCLAMATION);
      Exp();
      break;
    case L_PARENTHESIS:
      jj_consume_token(L_PARENTHESIS);
      Exp();
      jj_consume_token(R_PARENTHESIS);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExpPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case LESS_THAN:
    case PLUS:
    case MINUS:
    case STAR:
      Op();
      Term();
      ExpPrime();
      break;
    case LSQUAREBRACKET:
      jj_consume_token(LSQUAREBRACKET);
      Term();
      ExpPrime();
      jj_consume_token(RSQUAREBRACKET);
      ExpPrime();
      break;
    case DOT:
      jj_consume_token(DOT);
      Fat();
      break;
    default:
      jj_la1[12] = jj_gen;

    }
  }

  static final public void Fat() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENGTH:
      jj_consume_token(LENGTH);
      ExpPrime();
      break;
    case ID:
      jj_consume_token(ID);
      jj_consume_token(L_PARENTHESIS);
      Explist();
      jj_consume_token(R_PARENTHESIS);
      ExpPrime();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    case THIS:
      jj_consume_token(THIS);
      break;
    case NEW:
      jj_consume_token(NEW);
      Fat2();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Fat2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      jj_consume_token(LSQUAREBRACKET);
      Exp();
      jj_consume_token(RSQUAREBRACKET);
      break;
    case ID:
      jj_consume_token(ID);
      jj_consume_token(L_PARENTHESIS);
      jj_consume_token(R_PARENTHESIS);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Explist() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case THIS:
    case TRUE:
    case FALSE:
    case EXCLAMATION:
    case L_PARENTHESIS:
    case INTEGER_LITERAL:
    case ID:
      Exp();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_7;
        }
        Exprest();
      }
      break;
    default:
      jj_la1[17] = jj_gen;

    }
  }

  static final public void Exprest() throws ParseException {
    jj_consume_token(COMMA);
    Exp();
  }

  static final public void parseNextToken() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      t = jj_consume_token(IF);
             System.out.print("IF ");
      parseNextToken();
      break;
    case ELSE:
      t = jj_consume_token(ELSE);
               System.out.print("ELSE ");
      parseNextToken();
      break;
    case PUBLIC:
      t = jj_consume_token(PUBLIC);
                 System.out.print("PUBLIC ");
      parseNextToken();
      break;
    default:
      jj_la1[18] = jj_gen;
      System.exit(-1);
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public IncognitoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800,0x860000,0x100,0x860000,0x40020a0,0x80000000,0x860000,0x860000,0x40020a0,0x40020a0,0x0,0x1398000,0x10000000,0x4000,0x198000,0x40000,0x80000000,0x1398000,0x160,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x100,0x0,0x100,0x100,0x0,0x100,0x100,0x100,0x100,0x3e,0x180,0x3f,0x100,0x180,0x100,0x0,0x180,0x0,};
   }

  /** Constructor with InputStream. */
  public Incognito(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Incognito(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new IncognitoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Incognito(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new IncognitoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Incognito(IncognitoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(IncognitoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
