
options {
	BUILD_PARSER = true;
	BUILD_TOKEN_MANAGER = true;
	LOOKAHEAD=2;
}

PARSER_BEGIN(Incognito)

public class Incognito
{
    public static void main(String args[]) throws ParseException
    {
		Incognito parser = null;

		if (args.length == 0){
			System.out.println("Incognito: No input file.");
		}
		else if (args.length == 1) {
			System.out.println("Incognito: Reading from file " + args[0] + " ...");
			try {
				parser = new Incognito(new java.io.FileInputStream(args[0]));
			}
			catch (java.io.FileNotFoundException e) {
				System.out.println("Incognito: File " + args[0] + " not found.");
				return;
			}
		}

		try {
			parser.Goal();
		 	System.out.println("Incognito: MiniJava program parsed successfully.");
		} catch (ParseException e) {
			System.out.println(e.getMessage());
			System.out.println("Incognito: Encountered errors during parse.");
		}
    }
}

PARSER_END(Incognito)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN:
{
    < IF: "if" >	
|   < ELSE: "else" >	
|   < WHILE: "while" >
|   < PUBLIC: "public" >	
|   < MAIN: "public static void main" >
|   < CLASS: "class" >
|   < EXTENDS: "extends" >
|   < RETURN: "return" >
|   < PRINT: "System.out.println" >
|   < LENGTH: "length" >
|   < NEW: "new" >
|   < THIS: "this" >
|   < BOOLEAN: "boolean" >
|   < INT: "int" >
|	< TRUE: "true" >
|	< FALSE: "false" >
|   < EXCLAMATION: "!" >
|   < STRING_ARRAY: ("String" (" ")* "[]") >
|   < INT_ARRAY: ( "int" (" ")* "[]" ) >

|   < L_PARENTHESIS: "(" >
|   < R_PARENTHESIS: ")" >
|   < LCURLYBRACE: "{" >
|   < RCURLYBRACE: "}" >
|   < LSQUAREBRACKET: "[" >
|   < RSQUAREBRACKET: "]" >
|   < SEMICOLON: ";" >
|   < COMMA: "," >
|   < DOT: "." >


|   < AND: "&&" >
|   < LESS_THAN: "<" >
|   < PLUS: "+" >
|   < MINUS: "-" >
|   < STAR: "*" >
|   < ASSIGNEQUAL: "=" >



|   < INTEGER_LITERAL: (<DIGIT>)+ >
|   < ID: (["a"-"z"] | "_" | ["A"-"Z"]) (["a"-"z"]|<DIGIT>|"_"|["A"-"Z"])* >
|   < DIGIT: ["0"-"9"] >
}

Program Goal():
{
	ClassDeclList classDeclList = new ClassDeclList();
	ClassDecl classDecl;
	MainClass mainclass;
}
{
	mainclass = MainClass()
	(
		classDecl = ClassDecl() 	{ classDeclList.addElement(classDecl); }
	)*
	<EOF>
	{ return new Program(mainclass, classDeclList); }
}

MainClass MainClass():
{
	Token t;
	Identifier id1;
	Identifier id2;
	Statement statement;
}
{
	<CLASS>
	t = <ID>				{id1 = new Identifier(t.image);}
	<LCURLYBRACE>
	<MAIN>
	<L_PARENTHESIS>
	<STRING_ARRAY>
	t = <ID>				{id2 = new Identifier(t.image);}
	<R_PARENTHESIS> 
	<LCURLYBRACE>
	statement = Statement()
	<RCURLYBRACE>
	<RCURLYBRACE>
	{ return new MainClass(id1, id2, statement); }
}

ClassDecl ClassDecl():
{
	VarDecl varDecl;
	VarDeclList varDeclList = new VarDeclList();
	MethodDecl methodDecl;
	MethodDeclList methodDeclList = new MethodDeclList();
	Token t;
	Identifier id1;
	Identifier id2 = null;
	ClassDecl classDecl;
	boolean extended = false;
}
{
	<CLASS>
	t = <ID>		{ id1 = new Identifier(t.image); }
	(
		<EXTENDS>
		t = <ID>	{ id2 = new Identifier(t.image);
					  extended = true; }
	)?
	<LCURLYBRACE>
	(
		varDecl = VarDecl()		{ varDeclList.addElement(varDecl); }
	)*
	(
		methodDecl = MethodDecl()		{ methodDeclList.addElement(methodDecl); }
	)*
	<RCURLYBRACE>
	{
		if(extended)
			classDecl = new ClassDeclExtends(id1, id2, varDeclList, methodDeclList);
		else
			classDecl = new ClassDeclSimple(id1, varDeclList, methodDeclList);
			
		return classDecl;
	}
}

VarDecl VarDecl():
{
	Token t;
	Identifier id;
	Type type;
}
{
	type = Type()
	t = <ID>		{ id = new Identifier(t.image); }
	<SEMICOLON>
	{ return new VarDecl(type, id); }
}

MethodDecl MethodDecl():
{
	Type type;
	Token t;
	Identifier id;
	FormalList formalList;
	VarDeclList varDeclList = new VarDeclList();
	VarDecl varDecl;
	StatementList statementList = new StatementList();
	Statement statement;
	Exp exp;
}
{
	<PUBLIC> 
	type = Type() 
	t = <ID>						{ id = new Identifier(t.image); }  
	<L_PARENTHESIS>
	formalList = FormalList()		
	<R_PARENTHESIS> 
	<LCURLYBRACE>
	(
		varDecl = VarDecl()			{ varDeclList.addElement(varDecl); }
	)* 
	(
		statement = Statement()		{ statementList.addElement(statement); }
	)* 
	<RETURN> 
	exp = Exp() 
	<SEMICOLON>
	<RCURLYBRACE>
	{ return new MethodDecl(type, id, formalList, varDeclList, statementList, exp); }
}

FormalList FormalList():
{
	Token t;
	Identifier id;
	Type type;
	FormalList formalList = new FormalList();
	Formal formal;
}
{
	type = Type()
	t = <ID>
	{
		id = new Identifier(t.image);
		formalList.addElement(new Formal(type, id));
	}
	(
		formal = FormalRest()		{formalList.addElement(formal);}
	)*
	{ return formalList; }
	
|	{ return formalList; }
}

Formal FormalRest():
{
	Token t;
	Identifier id;
	Type type;
}
{
	<COMMA>
	type = Type()
	t = <ID>
	{
		id = new Identifier(t.image);
		return new Formal(type, id);
	}
}

Type Type():
{
	Type type;
	Token t;
}
{
	<INT_ARRAY>		{ return new IntArrayType(); }
|	<BOOLEAN>		{ return new BooleanType(); }
|	<INT>			{ return new IntegerType(); }
|	t = <ID>		{ return new IdentifierType(t.image); }
}


Statement Statement():
{
	Statement statement;
	StatementList statementList = new StatementList();
	Exp exp = null;
	Exp exp2;
	Statement statement2;
	boolean arrayassign = false;
	Token t;
}
{
	<LCURLYBRACE>
	(
		statement = Statement()		{ statementList.addElement(statement); }
	)* 
	<RCURLYBRACE>
	{ return new Block(statementList); }
	
|	<IF>
	<L_PARENTHESIS>
	exp = Exp()
	<R_PARENTHESIS>
	statement = Statement()
	<ELSE>
	statement2 = Statement()
	{ return new If(exp, statement, statement2); }
	
|	<WHILE>
	<L_PARENTHESIS>
	exp = Exp()
	<R_PARENTHESIS>
	statement = Statement()
	{ return new While(exp, statement); }
	
|	<PRINT>
	<L_PARENTHESIS>
	exp = Exp()
	<R_PARENTHESIS>
	<SEMICOLON>
	{ return new Print(exp); }
	
|	t = <ID>
	(
		<LSQUAREBRACKET>
		exp = Exp()
		<RSQUAREBRACKET>
		{ arrayassign = true; }
	)?
	<ASSIGNEQUAL>
	exp2 = Exp()
	<SEMICOLON>
	{
		if(arrayassign)
			return new ArrayAssign(new Identifier(t.image), exp, exp2);
		else
			return new Assign(new Identifier(t.image), exp2);
	}
}

Exp Exp():
{
	Exp exp;
}
{
	exp = Term()
	exp = ExpPrime(exp)
	{
		return exp;
	}
}

Exp ExpPrime(Exp exp):
{
	Exp exp2;
}
{
	<PLUS>
	exp2 = Term()
	exp2 = ExpPrime(exp2)
	{ return new Plus(exp, exp2); }
	
|	<MINUS>
	exp2 = Term()
	exp2 = ExpPrime(exp2)
	{ return new Minus(exp, exp2); }
	
|	{ return exp; }
}

Exp Term():
{
	Exp exp;
}
{
	exp = Term2()
	exp = TermPrime(exp)
	{
		return exp;
	}
}

Exp TermPrime(Exp exp):
{
	Exp exp2;
}
{
	<STAR>
	exp2 = Term2()
	exp2 = TermPrime(exp2)
	{ return new Times(exp, exp2); }
	
|	{ return exp; }
}

Exp Term2():
{
	Exp exp;
}
{
	exp = Fat()
	exp = Term2Prime(exp)
	{ return exp; }
}

Exp Term2Prime(Exp exp):
{
	Exp exp2;
}
{
	<AND>
	exp2 = Fat()
	exp2 = Term2Prime(exp2)
	{ return new And(exp, exp2); }
	
|	<LESS_THAN>
	exp2 = Fat()
	exp2 = Term2Prime(exp2)
	{ return new LessThan(exp, exp2); }
	
|	<DOT>
	exp = Fat2(exp)
	{ return exp; }
	
|	<LSQUAREBRACKET>
	exp2 = Exp()
	<RSQUAREBRACKET>
	{ return new ArrayLookup(exp, exp2); }

|	{ return exp; }
}

Exp Fat():
{
	Exp exp;
	Token t;
}
{
	t = <INTEGER_LITERAL>	{ return new IntegerLiteral(Integer.parseInt(t.image)); }
	
|	<TRUE> 					{ return new True(); }

|	<FALSE>					{ return new False(); }

|	t = <ID>				{ return new IdentifierExp(t.image); }

|	<THIS>					{ return new This(); }

|	<EXCLAMATION>
	exp = Exp()				{ return new Not(exp); }
		
|	<L_PARENTHESIS>
	exp = Exp()
	<R_PARENTHESIS>			{ return exp; }

|	<NEW>
	exp = Fat3()			{ return exp; }
}

Exp Fat2(Exp exp):
{
	Token t;
	ExpList expList;
}
{
	<LENGTH>
	{ return new ArrayLength(exp); }
	
|	t = <ID>
	<L_PARENTHESIS>
	expList = ExpList()
	<R_PARENTHESIS>
	{ return new Call(exp, new Identifier(t.image), expList); }
}

Exp Fat3():
{
	Exp exp;
	Token t;
}
{
	<INT>
	<LSQUAREBRACKET>
	exp = Exp()
	<RSQUAREBRACKET>
	{ return new NewArray(exp); }
	
|	t = <ID>
	<L_PARENTHESIS>
	<R_PARENTHESIS>
	{ return new NewObject(new Identifier(t.image)); }
}

ExpList ExpList():
{
	Exp exp;
	ExpList expList = new ExpList();
}
{
	exp = Exp()				{ expList.addElement(exp); }
	(
		exp = ExpRest()		{ expList.addElement(exp); }
	)*
	{ return expList; }
	
|	{ return expList; }
}

Exp ExpRest():
{
	Exp exp;
}
{
    <COMMA>
    exp = Exp()
    { return exp; }
}
