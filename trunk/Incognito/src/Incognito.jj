PARSER_BEGIN(Incognito)

public class Incognito
{
    public static void main(String args[]) throws ParseException
    {
        Incognito parser = new Incognito(System.in);
        while (true)
        {
            parser.parseNextToken();
        }
    }
}

PARSER_END(Incognito)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN:
{
    < IF: "if" >	
|   < ELSE: "else" >	
|   < WHILE: "while" >
|   < PUBLIC: "public" >	
|   < MAIN: "public static void main" >
|   < CLASS: "class" >
|   < EXTENDS: "extends" >
|   < RETURN: "return" >
|   < PRINT: "System.out.println" >
|   < LENGTH: "length" >
|   < NEW: "new" >
|   < THIS: "this" >
|   < BOOLEAN: "boolean" >
|   < INT: "int" >
|	< TRUE: "true" >
|	< FALSE: "false" >
|   < EXCLAMATION: "!" >
|   < STRING_ARRAY: ("String" (" ")* "[]") >
|   < INT_ARRAY: ( "int" (" ")* "[]" ) >

|   < L_PARENTHESIS: "(" >
|   < R_PARENTHESIS: ")" >
|   < LCURLYBRACE: "{" >
|   < RCURLYBRACE: "}" >
|   < LSQUAREBRACKET: "[" >
|   < RSQUAREBRACKET: "]" >
|   < SEMICOLON: ";" >
|   < COMMA: "," >
|   < DOT: "." >


|   < AND: "&&" >
|   < LESS_THAN: "<" >
|   < PLUS: "+" >
|   < MINUS: "-" >
|   < STAR: "*" >
|   < ASSIGNEQUAL: "=" >



|   < INTEGER_LITERAL: (<DIGIT>)+ >
|   < ID: ["a"-"z"] (["a"-"z"]|<DIGIT>) >
|   < DIGIT: ["0"-"9"] >

}

void MainClass():
{ }
{
	<CLASS> <ID> <LCURLYBRACE>
		<MAIN> <L_PARENTHESIS>
			<STRING_ARRAY> <ID>
		<R_PARENTHESIS> 
		<LCURLYBRACE>
			Statement()
		<RCURLYBRACE>
	<RCURLYBRACE>
	
}

void ClassDecl():
{ }
{
<CLASS> <ID> (<EXTENDS> <ID>)? <LCURLYBRACE>
		( VarDecl() )*
		( MethodDecl() )*
	<RCURLYBRACE>
}

void VarDecl():
{ }
{
	Type() <ID> <SEMICOLON>
}

void MethodDecl():
{ }
{
	<PUBLIC> Type() <ID>  <L_PARENTHESIS>
		FormalList()		
	<R_PARENTHESIS> <LCURLYBRACE>
		(VarDecl())* (Statement())* <RETURN> Exp() <SEMICOLON>
	<RCURLYBRACE>
}

void FormalList():
{ }
{
	Type() <ID> (FormalRest())*
}

void FormalRest():
{ }
{
	<COMMA> Type() <ID>
}

void Type():
{ }
{
	<INT_ARRAY>
|	<BOOLEAN>
|	<INT>	
|	<ID>
}


void Statement():
{ }
{
	<LCURLYBRACE> (Statement())* <RCURLYBRACE>
|	<IF> <L_PARENTHESIS> Exp() <R_PARENTHESIS> Statement() <ELSE> Statement()
|	<WHILE> <L_PARENTHESIS> Exp() <R_PARENTHESIS> Statement()
|	<PRINT> <L_PARENTHESIS> Exp() <R_PARENTHESIS> Statement() <SEMICOLON>
|	<ID> <ASSIGNEQUAL> Exp() <SEMICOLON>
|	<ID> <LSQUAREBRACKET> Exp() <RSQUAREBRACKET> <ASSIGNEQUAL> Exp() <SEMICOLON>
}

void Op():
{}
{
	<AND>
|	<LESS_THAN>
|	<PLUS>
|	<MINUS>
|	<STAR>
}

void Exp():
{ }
{
	Term() ExpPrime() Fat()
	

}

void Fat():
{}
{
	<LSQUAREBRACKET> Exp() <RSQUAREBRACKET>
|	<DOT> <LENGTH>
|	<ID> Explist()
|
}

void Fat2():
{}
{
	<INT> <LSQUAREBRACKET> Exp() <RSQUAREBRACKET>
|	<ID> <L_PARENTHESIS> <R_PARENTHESIS>
}

void ExpPrime():
{}
{
	Op() Term() ExpPrime()
|	
}

void Term():
{}
{
	<INTEGER_LITERAL>
|	<TRUE>
|	<FALSE>
|	<ID>
|	<THIS>
|	<NEW> Fat2()
|	<EXCLAMATION> Exp()
|	<L_PARENTHESIS> Exp() <R_PARENTHESIS>

}



void Explist():
{ }
{
	Exp() (Exprest())*
}

void Exprest():
{ }
{
    <COMMA> Exp()
}




void parseNextToken():
{
    Token t;
}
{
    t=<IF> { System.out.print("IF "); } ( parseNextToken())	
|   t=<ELSE> { System.out.print("ELSE "); } ( parseNextToken())
|   t=<PUBLIC> { System.out.print("PUBLIC "); } ( parseNextToken())
|   { System.exit(-1); }
  
}

